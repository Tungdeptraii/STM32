
3_frequency-counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a78  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002b84  08002b84  00003b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf8  08002bf8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf8  08002bf8  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf8  08002bf8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf8  08002bf8  00003bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bfc  08002bfc  00003bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002c00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000005c  08002c5c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08002c5c  000042d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b182  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a7  00000000  00000000  0000f207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00010bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000900  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd2  00000000  00000000  00012028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c98a  00000000  00000000  00028dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088688  00000000  00000000  00035784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bde0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000352c  00000000  00000000  000bde50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c137c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b6c 	.word	0x08002b6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b6c 	.word	0x08002b6c

0800014c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a14      	ldr	r2, [pc, #80]	@ (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d121      	bne.n	80001a2 <HAL_TIM_PeriodElapsedCallback+0x56>
    {
        gu32_CounterTicks = TIM2->CNT;
 800015e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000164:	4a12      	ldr	r2, [pc, #72]	@ (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000166:	6013      	str	r3, [r2, #0]
        gu32_Freq = gu32_CounterTicks * 20;
 8000168:	4b11      	ldr	r3, [pc, #68]	@ (80001b0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	4613      	mov	r3, r2
 800016e:	009b      	lsls	r3, r3, #2
 8000170:	4413      	add	r3, r2
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	461a      	mov	r2, r3
 8000176:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000178:	601a      	str	r2, [r3, #0]
        sprintf(gu8_MSG, "Frequency = %d Hz\n\r", gu32_Freq);
 800017a:	4b0e      	ldr	r3, [pc, #56]	@ (80001b4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	461a      	mov	r2, r3
 8000180:	490d      	ldr	r1, [pc, #52]	@ (80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000182:	480e      	ldr	r0, [pc, #56]	@ (80001bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000184:	f002 f842 	bl	800220c <siprintf>
        HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 8000188:	2364      	movs	r3, #100	@ 0x64
 800018a:	2228      	movs	r2, #40	@ 0x28
 800018c:	490b      	ldr	r1, [pc, #44]	@ (80001bc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800018e:	480c      	ldr	r0, [pc, #48]	@ (80001c0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000190:	f001 fe68 	bl	8001e64 <HAL_UART_Transmit>
        TIM3->CNT = 0;
 8000194:	4b05      	ldr	r3, [pc, #20]	@ (80001ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000196:	2200      	movs	r2, #0
 8000198:	625a      	str	r2, [r3, #36]	@ 0x24
        TIM2->CNT = 0;
 800019a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800019e:	2200      	movs	r2, #0
 80001a0:	625a      	str	r2, [r3, #36]	@ 0x24
    }
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40000400 	.word	0x40000400
 80001b0:	20000078 	.word	0x20000078
 80001b4:	2000007c 	.word	0x2000007c
 80001b8:	08002b84 	.word	0x08002b84
 80001bc:	20000080 	.word	0x20000080
 80001c0:	20000138 	.word	0x20000138

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c8:	f000 fabc 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001cc:	f000 f814 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d0:	f000 f922 	bl	8000418 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d4:	f000 f856 	bl	8000284 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001d8:	f000 f8a6 	bl	8000328 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f8f2 	bl	80003c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <main+0x2c>)
 80001e2:	f001 fa03 	bl	80015ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80001e6:	4803      	ldr	r0, [pc, #12]	@ (80001f4 <main+0x30>)
 80001e8:	f001 fa4a 	bl	8001680 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	bf00      	nop
 80001ee:	e7fd      	b.n	80001ec <main+0x28>
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	200000f0 	.word	0x200000f0

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f820 	bl	800224c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000234:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fd73 	bl	8000d2c <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f906 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ffe0 	bl	8001230 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f8f1 	bl	800045c <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	@ 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002bc:	4b19      	ldr	r3, [pc, #100]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002c2:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002c4:	2280      	movs	r2, #128	@ 0x80
 80002c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c8:	4816      	ldr	r0, [pc, #88]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002ca:	f001 f93f 	bl	800154c <HAL_TIM_Base_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002d4:	f000 f8c2 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80002d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002dc:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <MX_TIM2_Init+0xa0>)
 80002f2:	f001 fb07 	bl	8001904 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80002fc:	f000 f8ae 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_TIM2_Init+0xa0>)
 800030e:	f001 fce9 	bl	8001ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000318:	f000 f8a0 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200000a8 	.word	0x200000a8

08000328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000344:	4b1d      	ldr	r3, [pc, #116]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000346:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <MX_TIM3_Init+0x98>)
 8000348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800034a:	4b1c      	ldr	r3, [pc, #112]	@ (80003bc <MX_TIM3_Init+0x94>)
 800034c:	2264      	movs	r2, #100	@ 0x64
 800034e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b1a      	ldr	r3, [pc, #104]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36000;
 8000356:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000358:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 800035c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800036a:	4814      	ldr	r0, [pc, #80]	@ (80003bc <MX_TIM3_Init+0x94>)
 800036c:	f001 f8ee 	bl	800154c <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000376:	f000 f871 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800037e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4619      	mov	r1, r3
 8000386:	480d      	ldr	r0, [pc, #52]	@ (80003bc <MX_TIM3_Init+0x94>)
 8000388:	f001 fabc 	bl	8001904 <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f863 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	@ (80003bc <MX_TIM3_Init+0x94>)
 80003a4:	f001 fc9e 	bl	8001ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80003ae:	f000 f855 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000f0 	.word	0x200000f0
 80003c0:	40000400 	.word	0x40000400

080003c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <MX_USART1_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_USART1_UART_Init+0x4c>)
 80003fc:	f001 fce2 	bl	8001dc4 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f829 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000138 	.word	0x20000138
 8000414:	40013800 	.word	0x40013800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000424:	f043 0320 	orr.w	r3, r3, #32
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_GPIO_Init+0x40>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0320 	and.w	r3, r3, #32
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a07      	ldr	r2, [pc, #28]	@ (8000458 <MX_GPIO_Init+0x40>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <Error_Handler+0x8>

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <HAL_MspInit+0x5c>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <HAL_MspInit+0x60>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	4a04      	ldr	r2, [pc, #16]	@ (80004c8 <HAL_MspInit+0x60>)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010000 	.word	0x40010000

080004cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004ea:	d124      	bne.n	8000536 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004ec:	4b20      	ldr	r3, [pc, #128]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	61d3      	str	r3, [r2, #28]
 80004f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	f003 0301 	and.w	r3, r3, #1
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800051c:	2301      	movs	r3, #1
 800051e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4619      	mov	r1, r3
 800052e:	4811      	ldr	r0, [pc, #68]	@ (8000574 <HAL_TIM_Base_MspInit+0xa8>)
 8000530:	f000 fa78 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000534:	e018      	b.n	8000568 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM3)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a0f      	ldr	r2, [pc, #60]	@ (8000578 <HAL_TIM_Base_MspInit+0xac>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d113      	bne.n	8000568 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000540:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	61d3      	str	r3, [r2, #28]
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_TIM_Base_MspInit+0xa4>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	201d      	movs	r0, #29
 800055e:	f000 fa2a 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000562:	201d      	movs	r0, #29
 8000564:	f000 fa43 	bl	80009ee <HAL_NVIC_EnableIRQ>
}
 8000568:	bf00      	nop
 800056a:	3728      	adds	r7, #40	@ 0x28
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800
 8000578:	40000400 	.word	0x40000400

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1c      	ldr	r2, [pc, #112]	@ (8000608 <HAL_UART_MspInit+0x8c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d131      	bne.n	8000600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <HAL_UART_MspInit+0x94>)
 80005e2:	f000 fa1f 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <HAL_UART_MspInit+0x94>)
 80005fc:	f000 fa12 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f8b4 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000670:	4802      	ldr	r0, [pc, #8]	@ (800067c <TIM3_IRQHandler+0x10>)
 8000672:	f001 f857 	bl	8001724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000f0 	.word	0x200000f0

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 fdd4 	bl	800225c <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20005000 	.word	0x20005000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	20000180 	.word	0x20000180
 80006e8:	200002d0 	.word	0x200002d0

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f8:	f7ff fff8 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480b      	ldr	r0, [pc, #44]	@ (800072c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006fe:	490c      	ldr	r1, [pc, #48]	@ (8000730 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000700:	4a0c      	ldr	r2, [pc, #48]	@ (8000734 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000714:	4c09      	ldr	r4, [pc, #36]	@ (800073c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fda1 	bl	8002268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fd4d 	bl	80001c4 <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000734:	08002c00 	.word	0x08002c00
  ldr r2, =_sbss
 8000738:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800073c:	200002d0 	.word	0x200002d0

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	@ (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f923 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff fe82 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f93b 	bl	8000a0a <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f903 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	@ (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	@ (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000184 	.word	0x20000184

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	@ (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000184 	.word	0x20000184

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	@ (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4906      	ldr	r1, [pc, #24]	@ (80008a0 <__NVIC_EnableIRQ+0x34>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	@ (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	@ (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	@ 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	@ 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff90 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	@ (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff2d 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff42 	bl	8000850 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff90 	bl	80008f8 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5f 	bl	80008a4 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff35 	bl	800086c <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b08b      	sub	sp, #44	@ 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e169      	b.n	8000d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	f040 8158 	bne.w	8000d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a9a      	ldr	r2, [pc, #616]	@ (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d05e      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a60:	4a98      	ldr	r2, [pc, #608]	@ (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d875      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a66:	4a98      	ldr	r2, [pc, #608]	@ (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d058      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a6c:	4a96      	ldr	r2, [pc, #600]	@ (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d86f      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a72:	4a96      	ldr	r2, [pc, #600]	@ (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d052      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a78:	4a94      	ldr	r2, [pc, #592]	@ (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d869      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a94      	ldr	r2, [pc, #592]	@ (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d04c      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a84:	4a92      	ldr	r2, [pc, #584]	@ (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d863      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a92      	ldr	r2, [pc, #584]	@ (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d046      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a90:	4a90      	ldr	r2, [pc, #576]	@ (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d85d      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d82a      	bhi.n	8000af0 <HAL_GPIO_Init+0xcc>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d859      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa4 <HAL_GPIO_Init+0x80>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000b1f 	.word	0x08000b1f
 8000aa8:	08000af9 	.word	0x08000af9
 8000aac:	08000b0b 	.word	0x08000b0b
 8000ab0:	08000b4d 	.word	0x08000b4d
 8000ab4:	08000b53 	.word	0x08000b53
 8000ab8:	08000b53 	.word	0x08000b53
 8000abc:	08000b53 	.word	0x08000b53
 8000ac0:	08000b53 	.word	0x08000b53
 8000ac4:	08000b53 	.word	0x08000b53
 8000ac8:	08000b53 	.word	0x08000b53
 8000acc:	08000b53 	.word	0x08000b53
 8000ad0:	08000b53 	.word	0x08000b53
 8000ad4:	08000b53 	.word	0x08000b53
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b53 	.word	0x08000b53
 8000ae0:	08000b53 	.word	0x08000b53
 8000ae4:	08000b53 	.word	0x08000b53
 8000ae8:	08000b01 	.word	0x08000b01
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	4a79      	ldr	r2, [pc, #484]	@ (8000cd8 <HAL_GPIO_Init+0x2b4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af6:	e02c      	b.n	8000b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e029      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	3304      	adds	r3, #4
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e024      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e01f      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	330c      	adds	r3, #12
 8000b1a:	623b      	str	r3, [r7, #32]
          break;
 8000b1c:	e01a      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b26:	2304      	movs	r3, #4
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e013      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d105      	bne.n	8000b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	611a      	str	r2, [r3, #16]
          break;
 8000b3e:	e009      	b.n	8000b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	615a      	str	r2, [r3, #20]
          break;
 8000b4a:	e003      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          break;
 8000b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2bff      	cmp	r3, #255	@ 0xff
 8000b58:	d801      	bhi.n	8000b5e <HAL_GPIO_Init+0x13a>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	e001      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3304      	adds	r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	@ 0xff
 8000b68:	d802      	bhi.n	8000b70 <HAL_GPIO_Init+0x14c>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x152>
 8000b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b72:	3b08      	subs	r3, #8
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	401a      	ands	r2, r3
 8000b88:	6a39      	ldr	r1, [r7, #32]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	431a      	orrs	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 80b1 	beq.w	8000d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bbc:	4a48      	ldr	r2, [pc, #288]	@ (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a40      	ldr	r2, [pc, #256]	@ (8000ce4 <HAL_GPIO_Init+0x2c0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d013      	beq.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce8 <HAL_GPIO_Init+0x2c4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00d      	beq.n	8000c0c <HAL_GPIO_Init+0x1e8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a3e      	ldr	r2, [pc, #248]	@ (8000cec <HAL_GPIO_Init+0x2c8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <HAL_GPIO_Init+0x1e4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <HAL_GPIO_Init+0x1e0>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c04:	2304      	movs	r3, #4
 8000c06:	e004      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e002      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c10:	2300      	movs	r3, #0
 8000c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c14:	f002 0203 	and.w	r2, r2, #3
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	4093      	lsls	r3, r2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c22:	492f      	ldr	r1, [pc, #188]	@ (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3302      	adds	r3, #2
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	492c      	ldr	r1, [pc, #176]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4928      	ldr	r1, [pc, #160]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c64:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	4922      	ldr	r1, [pc, #136]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60cb      	str	r3, [r1, #12]
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	491e      	ldr	r1, [pc, #120]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4918      	ldr	r1, [pc, #96]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4914      	ldr	r1, [pc, #80]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d021      	beq.n	8000cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	490e      	ldr	r1, [pc, #56]	@ (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e021      	b.n	8000d06 <HAL_GPIO_Init+0x2e2>
 8000cc2:	bf00      	nop
 8000cc4:	10320000 	.word	0x10320000
 8000cc8:	10310000 	.word	0x10310000
 8000ccc:	10220000 	.word	0x10220000
 8000cd0:	10210000 	.word	0x10210000
 8000cd4:	10120000 	.word	0x10120000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <HAL_GPIO_Init+0x304>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4909      	ldr	r1, [pc, #36]	@ (8000d28 <HAL_GPIO_Init+0x304>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	3301      	adds	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d12:	fa22 f303 	lsr.w	r3, r2, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f47f ae8e 	bne.w	8000a38 <HAL_GPIO_Init+0x14>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	372c      	adds	r7, #44	@ 0x2c
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e272      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 8087 	beq.w	8000e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d4c:	4b92      	ldr	r3, [pc, #584]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d00c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d58:	4b8f      	ldr	r3, [pc, #572]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d112      	bne.n	8000d8a <HAL_RCC_OscConfig+0x5e>
 8000d64:	4b8c      	ldr	r3, [pc, #560]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d70:	d10b      	bne.n	8000d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d72:	4b89      	ldr	r3, [pc, #548]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d06c      	beq.n	8000e58 <HAL_RCC_OscConfig+0x12c>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d168      	bne.n	8000e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e24c      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d92:	d106      	bne.n	8000da2 <HAL_RCC_OscConfig+0x76>
 8000d94:	4b80      	ldr	r3, [pc, #512]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a7f      	ldr	r2, [pc, #508]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e02e      	b.n	8000e00 <HAL_RCC_OscConfig+0xd4>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x98>
 8000daa:	4b7b      	ldr	r3, [pc, #492]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a7a      	ldr	r2, [pc, #488]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	4b78      	ldr	r3, [pc, #480]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a77      	ldr	r2, [pc, #476]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e01d      	b.n	8000e00 <HAL_RCC_OscConfig+0xd4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0xbc>
 8000dce:	4b72      	ldr	r3, [pc, #456]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a71      	ldr	r2, [pc, #452]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b6f      	ldr	r3, [pc, #444]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a6e      	ldr	r2, [pc, #440]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e00b      	b.n	8000e00 <HAL_RCC_OscConfig+0xd4>
 8000de8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a6a      	ldr	r2, [pc, #424]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b68      	ldr	r3, [pc, #416]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a67      	ldr	r2, [pc, #412]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fcf4 	bl	80007f4 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e10:	f7ff fcf0 	bl	80007f4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b64      	cmp	r3, #100	@ 0x64
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e200      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e22:	4b5d      	ldr	r3, [pc, #372]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0xe4>
 8000e2e:	e014      	b.n	8000e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fce0 	bl	80007f4 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fcdc 	bl	80007f4 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	@ 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e1ec      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4a:	4b53      	ldr	r3, [pc, #332]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f0      	bne.n	8000e38 <HAL_RCC_OscConfig+0x10c>
 8000e56:	e000      	b.n	8000e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d063      	beq.n	8000f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e66:	4b4c      	ldr	r3, [pc, #304]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00b      	beq.n	8000e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e72:	4b49      	ldr	r3, [pc, #292]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d11c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x18c>
 8000e7e:	4b46      	ldr	r3, [pc, #280]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d116      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8a:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x176>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d001      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e1c0      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4939      	ldr	r1, [pc, #228]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	e03a      	b.n	8000f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d020      	beq.n	8000f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ec0:	4b36      	ldr	r3, [pc, #216]	@ (8000f9c <HAL_RCC_OscConfig+0x270>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fc95 	bl	80007f4 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ece:	f7ff fc91 	bl	80007f4 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e1a1      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f0      	beq.n	8000ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eec:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4927      	ldr	r1, [pc, #156]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	600b      	str	r3, [r1, #0]
 8000f00:	e015      	b.n	8000f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HAL_RCC_OscConfig+0x270>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc74 	bl	80007f4 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc70 	bl	80007f4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e180      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d03a      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d019      	beq.n	8000f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f48:	f7ff fc54 	bl	80007f4 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc50 	bl	80007f4 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e160      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 face 	bl	8001510 <RCC_Delay>
 8000f74:	e01c      	b.n	8000fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_RCC_OscConfig+0x274>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fc3a 	bl	80007f4 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f82:	e00f      	b.n	8000fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f84:	f7ff fc36 	bl	80007f4 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d908      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e146      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	42420000 	.word	0x42420000
 8000fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa4:	4b92      	ldr	r3, [pc, #584]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1e9      	bne.n	8000f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a6 	beq.w	800110a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10d      	bne.n	8000fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b88      	ldr	r3, [pc, #544]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a87      	ldr	r2, [pc, #540]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b85      	ldr	r3, [pc, #532]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fea:	4b82      	ldr	r3, [pc, #520]	@ (80011f4 <HAL_RCC_OscConfig+0x4c8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d118      	bne.n	8001028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80011f4 <HAL_RCC_OscConfig+0x4c8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80011f4 <HAL_RCC_OscConfig+0x4c8>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001002:	f7ff fbf7 	bl	80007f4 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100a:	f7ff fbf3 	bl	80007f4 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b64      	cmp	r3, #100	@ 0x64
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e103      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101c:	4b75      	ldr	r3, [pc, #468]	@ (80011f4 <HAL_RCC_OscConfig+0x4c8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f0      	beq.n	800100a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x312>
 8001030:	4b6f      	ldr	r3, [pc, #444]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a6e      	ldr	r2, [pc, #440]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	e02d      	b.n	800109a <HAL_RCC_OscConfig+0x36e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x334>
 8001046:	4b6a      	ldr	r3, [pc, #424]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a69      	ldr	r2, [pc, #420]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	4b67      	ldr	r3, [pc, #412]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a66      	ldr	r2, [pc, #408]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f023 0304 	bic.w	r3, r3, #4
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	e01c      	b.n	800109a <HAL_RCC_OscConfig+0x36e>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b05      	cmp	r3, #5
 8001066:	d10c      	bne.n	8001082 <HAL_RCC_OscConfig+0x356>
 8001068:	4b61      	ldr	r3, [pc, #388]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a60      	ldr	r2, [pc, #384]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	6213      	str	r3, [r2, #32]
 8001074:	4b5e      	ldr	r3, [pc, #376]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a5d      	ldr	r2, [pc, #372]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6213      	str	r3, [r2, #32]
 8001080:	e00b      	b.n	800109a <HAL_RCC_OscConfig+0x36e>
 8001082:	4b5b      	ldr	r3, [pc, #364]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a5a      	ldr	r2, [pc, #360]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	4b58      	ldr	r3, [pc, #352]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4a57      	ldr	r2, [pc, #348]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	f023 0304 	bic.w	r3, r3, #4
 8001098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d015      	beq.n	80010ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a2:	f7ff fba7 	bl	80007f4 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	e00a      	b.n	80010c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff fba3 	bl	80007f4 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e0b1      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c0:	4b4b      	ldr	r3, [pc, #300]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0ee      	beq.n	80010aa <HAL_RCC_OscConfig+0x37e>
 80010cc:	e014      	b.n	80010f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fb91 	bl	80007f4 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d4:	e00a      	b.n	80010ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fb8d 	bl	80007f4 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e09b      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ec:	4b40      	ldr	r3, [pc, #256]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ee      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d105      	bne.n	800110a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fe:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	4a3b      	ldr	r2, [pc, #236]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8087 	beq.w	8001222 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001114:	4b36      	ldr	r3, [pc, #216]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b08      	cmp	r3, #8
 800111e:	d061      	beq.n	80011e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d146      	bne.n	80011b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001128:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_RCC_OscConfig+0x4cc>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fb61 	bl	80007f4 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fb5d 	bl	80007f4 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e06d      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001148:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800115c:	d108      	bne.n	8001170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	4921      	ldr	r1, [pc, #132]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a19      	ldr	r1, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001180:	430b      	orrs	r3, r1
 8001182:	491b      	ldr	r1, [pc, #108]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <HAL_RCC_OscConfig+0x4cc>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fb31 	bl	80007f4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fb2d 	bl	80007f4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e03d      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x46a>
 80011b4:	e035      	b.n	8001222 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_RCC_OscConfig+0x4cc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fb1a 	bl	80007f4 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c4:	f7ff fb16 	bl	80007f4 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e026      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x498>
 80011e2:	e01e      	b.n	8001222 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e019      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40007000 	.word	0x40007000
 80011f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_RCC_OscConfig+0x500>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	429a      	cmp	r2, r3
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	429a      	cmp	r2, r3
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0d0      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b6a      	ldr	r3, [pc, #424]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d910      	bls.n	8001274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b67      	ldr	r3, [pc, #412]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 0207 	bic.w	r2, r3, #7
 800125a:	4965      	ldr	r1, [pc, #404]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001262:	4b63      	ldr	r3, [pc, #396]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d001      	beq.n	8001274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0b8      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800128c:	4b59      	ldr	r3, [pc, #356]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a58      	ldr	r2, [pc, #352]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a4:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b0:	4b50      	ldr	r3, [pc, #320]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	494d      	ldr	r1, [pc, #308]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d040      	beq.n	8001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d115      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e07f      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b41      	ldr	r3, [pc, #260]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e073      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e06b      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	4b39      	ldr	r3, [pc, #228]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4936      	ldr	r1, [pc, #216]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fa68 	bl	80007f4 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	e00a      	b.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001328:	f7ff fa64 	bl	80007f4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e053      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 020c 	and.w	r2, r3, #12
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	429a      	cmp	r2, r3
 800134e:	d1eb      	bne.n	8001328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d210      	bcs.n	8001380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 0207 	bic.w	r2, r3, #7
 8001366:	4922      	ldr	r1, [pc, #136]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136e:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e032      	b.n	80013e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4916      	ldr	r1, [pc, #88]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	490e      	ldr	r1, [pc, #56]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013be:	f000 f821 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	490a      	ldr	r1, [pc, #40]	@ (80013f8 <HAL_RCC_ClockConfig+0x1c8>)
 80013d0:	5ccb      	ldrb	r3, [r1, r3]
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <HAL_RCC_ClockConfig+0x1cc>)
 80013d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_RCC_ClockConfig+0x1d0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f9c6 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	08002b98 	.word	0x08002b98
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x94>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d002      	beq.n	8001434 <HAL_RCC_GetSysClockFreq+0x30>
 800142e:	2b08      	cmp	r3, #8
 8001430:	d003      	beq.n	800143a <HAL_RCC_GetSysClockFreq+0x36>
 8001432:	e027      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_RCC_GetSysClockFreq+0x98>)
 8001436:	613b      	str	r3, [r7, #16]
      break;
 8001438:	e027      	b.n	800148a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	0c9b      	lsrs	r3, r3, #18
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d010      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_RCC_GetSysClockFreq+0x94>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0c5b      	lsrs	r3, r3, #17
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <HAL_RCC_GetSysClockFreq+0x98>)
 8001466:	fb03 f202 	mul.w	r2, r3, r2
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e004      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	613b      	str	r3, [r7, #16]
      break;
 8001482:	e002      	b.n	800148a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_RCC_GetSysClockFreq+0x98>)
 8001486:	613b      	str	r3, [r7, #16]
      break;
 8001488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148a:	693b      	ldr	r3, [r7, #16]
}
 800148c:	4618      	mov	r0, r3
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	007a1200 	.word	0x007a1200
 80014a0:	08002bb0 	.word	0x08002bb0
 80014a4:	08002bc0 	.word	0x08002bc0
 80014a8:	003d0900 	.word	0x003d0900

080014ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b0:	4b02      	ldr	r3, [pc, #8]	@ (80014bc <HAL_RCC_GetHCLKFreq+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000000 	.word	0x20000000

080014c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c4:	f7ff fff2 	bl	80014ac <HAL_RCC_GetHCLKFreq>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	4903      	ldr	r1, [pc, #12]	@ (80014e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d6:	5ccb      	ldrb	r3, [r1, r3]
 80014d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014dc:	4618      	mov	r0, r3
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08002ba8 	.word	0x08002ba8

080014e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014ec:	f7ff ffde 	bl	80014ac <HAL_RCC_GetHCLKFreq>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	0adb      	lsrs	r3, r3, #11
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	4903      	ldr	r1, [pc, #12]	@ (800150c <HAL_RCC_GetPCLK2Freq+0x24>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	08002ba8 	.word	0x08002ba8

08001510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <RCC_Delay+0x34>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <RCC_Delay+0x38>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0a5b      	lsrs	r3, r3, #9
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800152c:	bf00      	nop
  }
  while (Delay --);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e5a      	subs	r2, r3, #1
 8001532:	60fa      	str	r2, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f9      	bne.n	800152c <RCC_Delay+0x1c>
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	20000000 	.word	0x20000000
 8001548:	10624dd3 	.word	0x10624dd3

0800154c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e041      	b.n	80015e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7fe ffaa 	bl	80004cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f000 faa6 	bl	8001adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d001      	beq.n	8001604 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e032      	b.n	800166a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <HAL_TIM_Base_Start+0x88>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d00e      	beq.n	8001634 <HAL_TIM_Base_Start+0x48>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800161e:	d009      	beq.n	8001634 <HAL_TIM_Base_Start+0x48>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <HAL_TIM_Base_Start+0x8c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d004      	beq.n	8001634 <HAL_TIM_Base_Start+0x48>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a13      	ldr	r2, [pc, #76]	@ (800167c <HAL_TIM_Base_Start+0x90>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d111      	bne.n	8001658 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b06      	cmp	r3, #6
 8001644:	d010      	beq.n	8001668 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001656:	e007      	b.n	8001668 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40012c00 	.word	0x40012c00
 8001678:	40000400 	.word	0x40000400
 800167c:	40000800 	.word	0x40000800

08001680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d001      	beq.n	8001698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e03a      	b.n	800170e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <HAL_TIM_Base_Start_IT+0x98>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00e      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x58>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c2:	d009      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x58>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <HAL_TIM_Base_Start_IT+0x9c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d004      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x58>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <HAL_TIM_Base_Start_IT+0xa0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d111      	bne.n	80016fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d010      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016fa:	e007      	b.n	800170c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40000400 	.word	0x40000400
 8001720:	40000800 	.word	0x40000800

08001724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d020      	beq.n	8001788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01b      	beq.n	8001788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0202 	mvn.w	r2, #2
 8001758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f998 	bl	8001aa4 <HAL_TIM_IC_CaptureCallback>
 8001774:	e005      	b.n	8001782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f98b 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f99a 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d020      	beq.n	80017d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0204 	mvn.w	r2, #4
 80017a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f972 	bl	8001aa4 <HAL_TIM_IC_CaptureCallback>
 80017c0:	e005      	b.n	80017ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f965 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f974 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d020      	beq.n	8001820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0208 	mvn.w	r2, #8
 80017f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2204      	movs	r2, #4
 80017f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f94c 	bl	8001aa4 <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f93f 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f94e 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d020      	beq.n	800186c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0210 	mvn.w	r2, #16
 800183c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2208      	movs	r2, #8
 8001842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f926 	bl	8001aa4 <HAL_TIM_IC_CaptureCallback>
 8001858:	e005      	b.n	8001866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f919 	bl	8001a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f928 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0201 	mvn.w	r2, #1
 8001888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe fc5e 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fa7f 	bl	8001db2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00c      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f8f8 	bl	8001ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0220 	mvn.w	r2, #32
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fa52 	bl	8001da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_TIM_ConfigClockSource+0x1c>
 800191c:	2302      	movs	r3, #2
 800191e:	e0b4      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x186>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800193e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001958:	d03e      	beq.n	80019d8 <HAL_TIM_ConfigClockSource+0xd4>
 800195a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800195e:	f200 8087 	bhi.w	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001966:	f000 8086 	beq.w	8001a76 <HAL_TIM_ConfigClockSource+0x172>
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800196e:	d87f      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001970:	2b70      	cmp	r3, #112	@ 0x70
 8001972:	d01a      	beq.n	80019aa <HAL_TIM_ConfigClockSource+0xa6>
 8001974:	2b70      	cmp	r3, #112	@ 0x70
 8001976:	d87b      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001978:	2b60      	cmp	r3, #96	@ 0x60
 800197a:	d050      	beq.n	8001a1e <HAL_TIM_ConfigClockSource+0x11a>
 800197c:	2b60      	cmp	r3, #96	@ 0x60
 800197e:	d877      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001980:	2b50      	cmp	r3, #80	@ 0x50
 8001982:	d03c      	beq.n	80019fe <HAL_TIM_ConfigClockSource+0xfa>
 8001984:	2b50      	cmp	r3, #80	@ 0x50
 8001986:	d873      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001988:	2b40      	cmp	r3, #64	@ 0x40
 800198a:	d058      	beq.n	8001a3e <HAL_TIM_ConfigClockSource+0x13a>
 800198c:	2b40      	cmp	r3, #64	@ 0x40
 800198e:	d86f      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001990:	2b30      	cmp	r3, #48	@ 0x30
 8001992:	d064      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15a>
 8001994:	2b30      	cmp	r3, #48	@ 0x30
 8001996:	d86b      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 8001998:	2b20      	cmp	r3, #32
 800199a:	d060      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15a>
 800199c:	2b20      	cmp	r3, #32
 800199e:	d867      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d05c      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15a>
 80019a4:	2b10      	cmp	r3, #16
 80019a6:	d05a      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15a>
 80019a8:	e062      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019ba:	f000 f974 	bl	8001ca6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80019cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	609a      	str	r2, [r3, #8]
      break;
 80019d6:	e04f      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019e8:	f000 f95d 	bl	8001ca6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019fa:	609a      	str	r2, [r3, #8]
      break;
 80019fc:	e03c      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f000 f8d4 	bl	8001bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2150      	movs	r1, #80	@ 0x50
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f92b 	bl	8001c72 <TIM_ITRx_SetConfig>
      break;
 8001a1c:	e02c      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f000 f8f2 	bl	8001c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2160      	movs	r1, #96	@ 0x60
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f91b 	bl	8001c72 <TIM_ITRx_SetConfig>
      break;
 8001a3c:	e01c      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f000 f8b4 	bl	8001bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2140      	movs	r1, #64	@ 0x40
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f90b 	bl	8001c72 <TIM_ITRx_SetConfig>
      break;
 8001a5c:	e00c      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f000 f902 	bl	8001c72 <TIM_ITRx_SetConfig>
      break;
 8001a6e:	e003      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
      break;
 8001a74:	e000      	b.n	8001a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <TIM_Base_SetConfig+0xd0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00b      	beq.n	8001b0c <TIM_Base_SetConfig+0x30>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afa:	d007      	beq.n	8001b0c <TIM_Base_SetConfig+0x30>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb0 <TIM_Base_SetConfig+0xd4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d003      	beq.n	8001b0c <TIM_Base_SetConfig+0x30>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb4 <TIM_Base_SetConfig+0xd8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d108      	bne.n	8001b1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <TIM_Base_SetConfig+0xd0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <TIM_Base_SetConfig+0x62>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b2c:	d007      	beq.n	8001b3e <TIM_Base_SetConfig+0x62>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <TIM_Base_SetConfig+0xd4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0x62>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb4 <TIM_Base_SetConfig+0xd8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <TIM_Base_SetConfig+0xd0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d103      	bne.n	8001b84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f023 0201 	bic.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40012c00 	.word	0x40012c00
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40000800 	.word	0x40000800

08001bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	f023 0201 	bic.w	r2, r3, #1
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f023 030a 	bic.w	r3, r3, #10
 8001bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	621a      	str	r2, [r3, #32]
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f023 0210 	bic.w	r2, r3, #16
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	031b      	lsls	r3, r3, #12
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	621a      	str	r2, [r3, #32]
}
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f043 0307 	orr.w	r3, r3, #7
 8001c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	021a      	lsls	r2, r3, #8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	609a      	str	r2, [r3, #8]
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e046      	b.n	8001d8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a16      	ldr	r2, [pc, #88]	@ (8001d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00e      	beq.n	8001d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d48:	d009      	beq.n	8001d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d004      	beq.n	8001d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a10      	ldr	r2, [pc, #64]	@ (8001d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10c      	bne.n	8001d78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800

08001da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e042      	b.n	8001e5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fbc6 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	@ 0x24
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f971 	bl	80020f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d175      	bne.n	8001f70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Transmit+0x2c>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e06e      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2221      	movs	r2, #33	@ 0x21
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ea2:	f7fe fca7 	bl	80007f4 <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	88fa      	ldrh	r2, [r7, #6]
 8001eac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	88fa      	ldrh	r2, [r7, #6]
 8001eb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ebc:	d108      	bne.n	8001ed0 <HAL_UART_Transmit+0x6c>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e003      	b.n	8001ed8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ed8:	e02e      	b.n	8001f38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 f848 	bl	8001f7a <UART_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e03a      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10b      	bne.n	8001f1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	3302      	adds	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	e007      	b.n	8001f2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1cb      	bne.n	8001eda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2140      	movs	r1, #64	@ 0x40
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f814 	bl	8001f7a <UART_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e006      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4613      	mov	r3, r2
 8001f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f8a:	e03b      	b.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f92:	d037      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f94:	f7fe fc2e 	bl	80007f4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d302      	bcc.n	8001faa <UART_WaitOnFlagUntilTimeout+0x30>
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e03a      	b.n	8002024 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b80      	cmp	r3, #128	@ 0x80
 8001fc0:	d020      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	d01d      	beq.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d116      	bne.n	8002004 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f81d 	bl	800202c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00f      	b.n	8002024 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4013      	ands	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	429a      	cmp	r2, r3
 8002020:	d0b4      	beq.n	8001f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800202c:	b480      	push	{r7}
 800202e:	b095      	sub	sp, #84	@ 0x54
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	330c      	adds	r3, #12
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800203c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203e:	e853 3f00 	ldrex	r3, [r3]
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800204a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	330c      	adds	r3, #12
 8002052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002054:	643a      	str	r2, [r7, #64]	@ 0x40
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800205a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800205c:	e841 2300 	strex	r3, r2, [r1]
 8002060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e5      	bne.n	8002034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3314      	adds	r3, #20
 800206e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	e853 3f00 	ldrex	r3, [r3]
 8002076:	61fb      	str	r3, [r7, #28]
   return(result);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3314      	adds	r3, #20
 8002086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002088:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800208e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002090:	e841 2300 	strex	r3, r2, [r1]
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e5      	bne.n	8002068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d119      	bne.n	80020d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	330c      	adds	r3, #12
 80020aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	e853 3f00 	ldrex	r3, [r3]
 80020b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f023 0310 	bic.w	r3, r3, #16
 80020ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	330c      	adds	r3, #12
 80020c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020c4:	61ba      	str	r2, [r7, #24]
 80020c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c8:	6979      	ldr	r1, [r7, #20]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	e841 2300 	strex	r3, r2, [r1]
 80020d0:	613b      	str	r3, [r7, #16]
   return(result);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e5      	bne.n	80020a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020e6:	bf00      	nop
 80020e8:	3754      	adds	r7, #84	@ 0x54
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800212a:	f023 030c 	bic.w	r3, r3, #12
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	430b      	orrs	r3, r1
 8002136:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a2c      	ldr	r2, [pc, #176]	@ (8002204 <UART_SetConfig+0x114>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d103      	bne.n	8002160 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002158:	f7ff f9c6 	bl	80014e8 <HAL_RCC_GetPCLK2Freq>
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	e002      	b.n	8002166 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002160:	f7ff f9ae 	bl	80014c0 <HAL_RCC_GetPCLK1Freq>
 8002164:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	441a      	add	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <UART_SetConfig+0x118>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	0119      	lsls	r1, r3, #4
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fbb2 f2f3 	udiv	r2, r2, r3
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <UART_SetConfig+0x118>)
 800219e:	fba3 0302 	umull	r0, r3, r3, r2
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2064      	movs	r0, #100	@ 0x64
 80021a6:	fb00 f303 	mul.w	r3, r0, r3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	3332      	adds	r3, #50	@ 0x32
 80021b0:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <UART_SetConfig+0x118>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021bc:	4419      	add	r1, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009a      	lsls	r2, r3, #2
 80021c8:	441a      	add	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <UART_SetConfig+0x118>)
 80021d6:	fba3 0302 	umull	r0, r3, r3, r2
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2064      	movs	r0, #100	@ 0x64
 80021de:	fb00 f303 	mul.w	r3, r0, r3
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	3332      	adds	r3, #50	@ 0x32
 80021e8:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <UART_SetConfig+0x118>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	440a      	add	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40013800 	.word	0x40013800
 8002208:	51eb851f 	.word	0x51eb851f

0800220c <siprintf>:
 800220c:	b40e      	push	{r1, r2, r3}
 800220e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002212:	b500      	push	{lr}
 8002214:	b09c      	sub	sp, #112	@ 0x70
 8002216:	ab1d      	add	r3, sp, #116	@ 0x74
 8002218:	9002      	str	r0, [sp, #8]
 800221a:	9006      	str	r0, [sp, #24]
 800221c:	9107      	str	r1, [sp, #28]
 800221e:	9104      	str	r1, [sp, #16]
 8002220:	4808      	ldr	r0, [pc, #32]	@ (8002244 <siprintf+0x38>)
 8002222:	4909      	ldr	r1, [pc, #36]	@ (8002248 <siprintf+0x3c>)
 8002224:	f853 2b04 	ldr.w	r2, [r3], #4
 8002228:	9105      	str	r1, [sp, #20]
 800222a:	6800      	ldr	r0, [r0, #0]
 800222c:	a902      	add	r1, sp, #8
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	f000 f992 	bl	8002558 <_svfiprintf_r>
 8002234:	2200      	movs	r2, #0
 8002236:	9b02      	ldr	r3, [sp, #8]
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	b01c      	add	sp, #112	@ 0x70
 800223c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002240:	b003      	add	sp, #12
 8002242:	4770      	bx	lr
 8002244:	2000000c 	.word	0x2000000c
 8002248:	ffff0208 	.word	0xffff0208

0800224c <memset>:
 800224c:	4603      	mov	r3, r0
 800224e:	4402      	add	r2, r0
 8002250:	4293      	cmp	r3, r2
 8002252:	d100      	bne.n	8002256 <memset+0xa>
 8002254:	4770      	bx	lr
 8002256:	f803 1b01 	strb.w	r1, [r3], #1
 800225a:	e7f9      	b.n	8002250 <memset+0x4>

0800225c <__errno>:
 800225c:	4b01      	ldr	r3, [pc, #4]	@ (8002264 <__errno+0x8>)
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000000c 	.word	0x2000000c

08002268 <__libc_init_array>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	2600      	movs	r6, #0
 800226c:	4d0c      	ldr	r5, [pc, #48]	@ (80022a0 <__libc_init_array+0x38>)
 800226e:	4c0d      	ldr	r4, [pc, #52]	@ (80022a4 <__libc_init_array+0x3c>)
 8002270:	1b64      	subs	r4, r4, r5
 8002272:	10a4      	asrs	r4, r4, #2
 8002274:	42a6      	cmp	r6, r4
 8002276:	d109      	bne.n	800228c <__libc_init_array+0x24>
 8002278:	f000 fc78 	bl	8002b6c <_init>
 800227c:	2600      	movs	r6, #0
 800227e:	4d0a      	ldr	r5, [pc, #40]	@ (80022a8 <__libc_init_array+0x40>)
 8002280:	4c0a      	ldr	r4, [pc, #40]	@ (80022ac <__libc_init_array+0x44>)
 8002282:	1b64      	subs	r4, r4, r5
 8002284:	10a4      	asrs	r4, r4, #2
 8002286:	42a6      	cmp	r6, r4
 8002288:	d105      	bne.n	8002296 <__libc_init_array+0x2e>
 800228a:	bd70      	pop	{r4, r5, r6, pc}
 800228c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002290:	4798      	blx	r3
 8002292:	3601      	adds	r6, #1
 8002294:	e7ee      	b.n	8002274 <__libc_init_array+0xc>
 8002296:	f855 3b04 	ldr.w	r3, [r5], #4
 800229a:	4798      	blx	r3
 800229c:	3601      	adds	r6, #1
 800229e:	e7f2      	b.n	8002286 <__libc_init_array+0x1e>
 80022a0:	08002bf8 	.word	0x08002bf8
 80022a4:	08002bf8 	.word	0x08002bf8
 80022a8:	08002bf8 	.word	0x08002bf8
 80022ac:	08002bfc 	.word	0x08002bfc

080022b0 <__retarget_lock_acquire_recursive>:
 80022b0:	4770      	bx	lr

080022b2 <__retarget_lock_release_recursive>:
 80022b2:	4770      	bx	lr

080022b4 <_free_r>:
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4605      	mov	r5, r0
 80022b8:	2900      	cmp	r1, #0
 80022ba:	d040      	beq.n	800233e <_free_r+0x8a>
 80022bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c0:	1f0c      	subs	r4, r1, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bfb8      	it	lt
 80022c6:	18e4      	addlt	r4, r4, r3
 80022c8:	f000 f8de 	bl	8002488 <__malloc_lock>
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <_free_r+0x8c>)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	b933      	cbnz	r3, 80022e0 <_free_r+0x2c>
 80022d2:	6063      	str	r3, [r4, #4]
 80022d4:	6014      	str	r4, [r2, #0]
 80022d6:	4628      	mov	r0, r5
 80022d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022dc:	f000 b8da 	b.w	8002494 <__malloc_unlock>
 80022e0:	42a3      	cmp	r3, r4
 80022e2:	d908      	bls.n	80022f6 <_free_r+0x42>
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	1821      	adds	r1, r4, r0
 80022e8:	428b      	cmp	r3, r1
 80022ea:	bf01      	itttt	eq
 80022ec:	6819      	ldreq	r1, [r3, #0]
 80022ee:	685b      	ldreq	r3, [r3, #4]
 80022f0:	1809      	addeq	r1, r1, r0
 80022f2:	6021      	streq	r1, [r4, #0]
 80022f4:	e7ed      	b.n	80022d2 <_free_r+0x1e>
 80022f6:	461a      	mov	r2, r3
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	b10b      	cbz	r3, 8002300 <_free_r+0x4c>
 80022fc:	42a3      	cmp	r3, r4
 80022fe:	d9fa      	bls.n	80022f6 <_free_r+0x42>
 8002300:	6811      	ldr	r1, [r2, #0]
 8002302:	1850      	adds	r0, r2, r1
 8002304:	42a0      	cmp	r0, r4
 8002306:	d10b      	bne.n	8002320 <_free_r+0x6c>
 8002308:	6820      	ldr	r0, [r4, #0]
 800230a:	4401      	add	r1, r0
 800230c:	1850      	adds	r0, r2, r1
 800230e:	4283      	cmp	r3, r0
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	d1e0      	bne.n	80022d6 <_free_r+0x22>
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4408      	add	r0, r1
 800231a:	6010      	str	r0, [r2, #0]
 800231c:	6053      	str	r3, [r2, #4]
 800231e:	e7da      	b.n	80022d6 <_free_r+0x22>
 8002320:	d902      	bls.n	8002328 <_free_r+0x74>
 8002322:	230c      	movs	r3, #12
 8002324:	602b      	str	r3, [r5, #0]
 8002326:	e7d6      	b.n	80022d6 <_free_r+0x22>
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	1821      	adds	r1, r4, r0
 800232c:	428b      	cmp	r3, r1
 800232e:	bf01      	itttt	eq
 8002330:	6819      	ldreq	r1, [r3, #0]
 8002332:	685b      	ldreq	r3, [r3, #4]
 8002334:	1809      	addeq	r1, r1, r0
 8002336:	6021      	streq	r1, [r4, #0]
 8002338:	6063      	str	r3, [r4, #4]
 800233a:	6054      	str	r4, [r2, #4]
 800233c:	e7cb      	b.n	80022d6 <_free_r+0x22>
 800233e:	bd38      	pop	{r3, r4, r5, pc}
 8002340:	200002cc 	.word	0x200002cc

08002344 <sbrk_aligned>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	4e0f      	ldr	r6, [pc, #60]	@ (8002384 <sbrk_aligned+0x40>)
 8002348:	460c      	mov	r4, r1
 800234a:	6831      	ldr	r1, [r6, #0]
 800234c:	4605      	mov	r5, r0
 800234e:	b911      	cbnz	r1, 8002356 <sbrk_aligned+0x12>
 8002350:	f000 fbaa 	bl	8002aa8 <_sbrk_r>
 8002354:	6030      	str	r0, [r6, #0]
 8002356:	4621      	mov	r1, r4
 8002358:	4628      	mov	r0, r5
 800235a:	f000 fba5 	bl	8002aa8 <_sbrk_r>
 800235e:	1c43      	adds	r3, r0, #1
 8002360:	d103      	bne.n	800236a <sbrk_aligned+0x26>
 8002362:	f04f 34ff 	mov.w	r4, #4294967295
 8002366:	4620      	mov	r0, r4
 8002368:	bd70      	pop	{r4, r5, r6, pc}
 800236a:	1cc4      	adds	r4, r0, #3
 800236c:	f024 0403 	bic.w	r4, r4, #3
 8002370:	42a0      	cmp	r0, r4
 8002372:	d0f8      	beq.n	8002366 <sbrk_aligned+0x22>
 8002374:	1a21      	subs	r1, r4, r0
 8002376:	4628      	mov	r0, r5
 8002378:	f000 fb96 	bl	8002aa8 <_sbrk_r>
 800237c:	3001      	adds	r0, #1
 800237e:	d1f2      	bne.n	8002366 <sbrk_aligned+0x22>
 8002380:	e7ef      	b.n	8002362 <sbrk_aligned+0x1e>
 8002382:	bf00      	nop
 8002384:	200002c8 	.word	0x200002c8

08002388 <_malloc_r>:
 8002388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800238c:	1ccd      	adds	r5, r1, #3
 800238e:	f025 0503 	bic.w	r5, r5, #3
 8002392:	3508      	adds	r5, #8
 8002394:	2d0c      	cmp	r5, #12
 8002396:	bf38      	it	cc
 8002398:	250c      	movcc	r5, #12
 800239a:	2d00      	cmp	r5, #0
 800239c:	4606      	mov	r6, r0
 800239e:	db01      	blt.n	80023a4 <_malloc_r+0x1c>
 80023a0:	42a9      	cmp	r1, r5
 80023a2:	d904      	bls.n	80023ae <_malloc_r+0x26>
 80023a4:	230c      	movs	r3, #12
 80023a6:	6033      	str	r3, [r6, #0]
 80023a8:	2000      	movs	r0, #0
 80023aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002484 <_malloc_r+0xfc>
 80023b2:	f000 f869 	bl	8002488 <__malloc_lock>
 80023b6:	f8d8 3000 	ldr.w	r3, [r8]
 80023ba:	461c      	mov	r4, r3
 80023bc:	bb44      	cbnz	r4, 8002410 <_malloc_r+0x88>
 80023be:	4629      	mov	r1, r5
 80023c0:	4630      	mov	r0, r6
 80023c2:	f7ff ffbf 	bl	8002344 <sbrk_aligned>
 80023c6:	1c43      	adds	r3, r0, #1
 80023c8:	4604      	mov	r4, r0
 80023ca:	d158      	bne.n	800247e <_malloc_r+0xf6>
 80023cc:	f8d8 4000 	ldr.w	r4, [r8]
 80023d0:	4627      	mov	r7, r4
 80023d2:	2f00      	cmp	r7, #0
 80023d4:	d143      	bne.n	800245e <_malloc_r+0xd6>
 80023d6:	2c00      	cmp	r4, #0
 80023d8:	d04b      	beq.n	8002472 <_malloc_r+0xea>
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	4639      	mov	r1, r7
 80023de:	4630      	mov	r0, r6
 80023e0:	eb04 0903 	add.w	r9, r4, r3
 80023e4:	f000 fb60 	bl	8002aa8 <_sbrk_r>
 80023e8:	4581      	cmp	r9, r0
 80023ea:	d142      	bne.n	8002472 <_malloc_r+0xea>
 80023ec:	6821      	ldr	r1, [r4, #0]
 80023ee:	4630      	mov	r0, r6
 80023f0:	1a6d      	subs	r5, r5, r1
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7ff ffa6 	bl	8002344 <sbrk_aligned>
 80023f8:	3001      	adds	r0, #1
 80023fa:	d03a      	beq.n	8002472 <_malloc_r+0xea>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	442b      	add	r3, r5
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	f8d8 3000 	ldr.w	r3, [r8]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	bb62      	cbnz	r2, 8002464 <_malloc_r+0xdc>
 800240a:	f8c8 7000 	str.w	r7, [r8]
 800240e:	e00f      	b.n	8002430 <_malloc_r+0xa8>
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	1b52      	subs	r2, r2, r5
 8002414:	d420      	bmi.n	8002458 <_malloc_r+0xd0>
 8002416:	2a0b      	cmp	r2, #11
 8002418:	d917      	bls.n	800244a <_malloc_r+0xc2>
 800241a:	1961      	adds	r1, r4, r5
 800241c:	42a3      	cmp	r3, r4
 800241e:	6025      	str	r5, [r4, #0]
 8002420:	bf18      	it	ne
 8002422:	6059      	strne	r1, [r3, #4]
 8002424:	6863      	ldr	r3, [r4, #4]
 8002426:	bf08      	it	eq
 8002428:	f8c8 1000 	streq.w	r1, [r8]
 800242c:	5162      	str	r2, [r4, r5]
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	4630      	mov	r0, r6
 8002432:	f000 f82f 	bl	8002494 <__malloc_unlock>
 8002436:	f104 000b 	add.w	r0, r4, #11
 800243a:	1d23      	adds	r3, r4, #4
 800243c:	f020 0007 	bic.w	r0, r0, #7
 8002440:	1ac2      	subs	r2, r0, r3
 8002442:	bf1c      	itt	ne
 8002444:	1a1b      	subne	r3, r3, r0
 8002446:	50a3      	strne	r3, [r4, r2]
 8002448:	e7af      	b.n	80023aa <_malloc_r+0x22>
 800244a:	6862      	ldr	r2, [r4, #4]
 800244c:	42a3      	cmp	r3, r4
 800244e:	bf0c      	ite	eq
 8002450:	f8c8 2000 	streq.w	r2, [r8]
 8002454:	605a      	strne	r2, [r3, #4]
 8002456:	e7eb      	b.n	8002430 <_malloc_r+0xa8>
 8002458:	4623      	mov	r3, r4
 800245a:	6864      	ldr	r4, [r4, #4]
 800245c:	e7ae      	b.n	80023bc <_malloc_r+0x34>
 800245e:	463c      	mov	r4, r7
 8002460:	687f      	ldr	r7, [r7, #4]
 8002462:	e7b6      	b.n	80023d2 <_malloc_r+0x4a>
 8002464:	461a      	mov	r2, r3
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	42a3      	cmp	r3, r4
 800246a:	d1fb      	bne.n	8002464 <_malloc_r+0xdc>
 800246c:	2300      	movs	r3, #0
 800246e:	6053      	str	r3, [r2, #4]
 8002470:	e7de      	b.n	8002430 <_malloc_r+0xa8>
 8002472:	230c      	movs	r3, #12
 8002474:	4630      	mov	r0, r6
 8002476:	6033      	str	r3, [r6, #0]
 8002478:	f000 f80c 	bl	8002494 <__malloc_unlock>
 800247c:	e794      	b.n	80023a8 <_malloc_r+0x20>
 800247e:	6005      	str	r5, [r0, #0]
 8002480:	e7d6      	b.n	8002430 <_malloc_r+0xa8>
 8002482:	bf00      	nop
 8002484:	200002cc 	.word	0x200002cc

08002488 <__malloc_lock>:
 8002488:	4801      	ldr	r0, [pc, #4]	@ (8002490 <__malloc_lock+0x8>)
 800248a:	f7ff bf11 	b.w	80022b0 <__retarget_lock_acquire_recursive>
 800248e:	bf00      	nop
 8002490:	200002c4 	.word	0x200002c4

08002494 <__malloc_unlock>:
 8002494:	4801      	ldr	r0, [pc, #4]	@ (800249c <__malloc_unlock+0x8>)
 8002496:	f7ff bf0c 	b.w	80022b2 <__retarget_lock_release_recursive>
 800249a:	bf00      	nop
 800249c:	200002c4 	.word	0x200002c4

080024a0 <__ssputs_r>:
 80024a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a4:	461f      	mov	r7, r3
 80024a6:	688e      	ldr	r6, [r1, #8]
 80024a8:	4682      	mov	sl, r0
 80024aa:	42be      	cmp	r6, r7
 80024ac:	460c      	mov	r4, r1
 80024ae:	4690      	mov	r8, r2
 80024b0:	680b      	ldr	r3, [r1, #0]
 80024b2:	d82d      	bhi.n	8002510 <__ssputs_r+0x70>
 80024b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80024bc:	d026      	beq.n	800250c <__ssputs_r+0x6c>
 80024be:	6965      	ldr	r5, [r4, #20]
 80024c0:	6909      	ldr	r1, [r1, #16]
 80024c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024c6:	eba3 0901 	sub.w	r9, r3, r1
 80024ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024ce:	1c7b      	adds	r3, r7, #1
 80024d0:	444b      	add	r3, r9
 80024d2:	106d      	asrs	r5, r5, #1
 80024d4:	429d      	cmp	r5, r3
 80024d6:	bf38      	it	cc
 80024d8:	461d      	movcc	r5, r3
 80024da:	0553      	lsls	r3, r2, #21
 80024dc:	d527      	bpl.n	800252e <__ssputs_r+0x8e>
 80024de:	4629      	mov	r1, r5
 80024e0:	f7ff ff52 	bl	8002388 <_malloc_r>
 80024e4:	4606      	mov	r6, r0
 80024e6:	b360      	cbz	r0, 8002542 <__ssputs_r+0xa2>
 80024e8:	464a      	mov	r2, r9
 80024ea:	6921      	ldr	r1, [r4, #16]
 80024ec:	f000 fafa 	bl	8002ae4 <memcpy>
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80024f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024fa:	81a3      	strh	r3, [r4, #12]
 80024fc:	6126      	str	r6, [r4, #16]
 80024fe:	444e      	add	r6, r9
 8002500:	6026      	str	r6, [r4, #0]
 8002502:	463e      	mov	r6, r7
 8002504:	6165      	str	r5, [r4, #20]
 8002506:	eba5 0509 	sub.w	r5, r5, r9
 800250a:	60a5      	str	r5, [r4, #8]
 800250c:	42be      	cmp	r6, r7
 800250e:	d900      	bls.n	8002512 <__ssputs_r+0x72>
 8002510:	463e      	mov	r6, r7
 8002512:	4632      	mov	r2, r6
 8002514:	4641      	mov	r1, r8
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	f000 faac 	bl	8002a74 <memmove>
 800251c:	2000      	movs	r0, #0
 800251e:	68a3      	ldr	r3, [r4, #8]
 8002520:	1b9b      	subs	r3, r3, r6
 8002522:	60a3      	str	r3, [r4, #8]
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	4433      	add	r3, r6
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800252e:	462a      	mov	r2, r5
 8002530:	f000 fae6 	bl	8002b00 <_realloc_r>
 8002534:	4606      	mov	r6, r0
 8002536:	2800      	cmp	r0, #0
 8002538:	d1e0      	bne.n	80024fc <__ssputs_r+0x5c>
 800253a:	4650      	mov	r0, sl
 800253c:	6921      	ldr	r1, [r4, #16]
 800253e:	f7ff feb9 	bl	80022b4 <_free_r>
 8002542:	230c      	movs	r3, #12
 8002544:	f8ca 3000 	str.w	r3, [sl]
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	e7e9      	b.n	800252a <__ssputs_r+0x8a>
	...

08002558 <_svfiprintf_r>:
 8002558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255c:	4698      	mov	r8, r3
 800255e:	898b      	ldrh	r3, [r1, #12]
 8002560:	4607      	mov	r7, r0
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	460d      	mov	r5, r1
 8002566:	4614      	mov	r4, r2
 8002568:	b09d      	sub	sp, #116	@ 0x74
 800256a:	d510      	bpl.n	800258e <_svfiprintf_r+0x36>
 800256c:	690b      	ldr	r3, [r1, #16]
 800256e:	b973      	cbnz	r3, 800258e <_svfiprintf_r+0x36>
 8002570:	2140      	movs	r1, #64	@ 0x40
 8002572:	f7ff ff09 	bl	8002388 <_malloc_r>
 8002576:	6028      	str	r0, [r5, #0]
 8002578:	6128      	str	r0, [r5, #16]
 800257a:	b930      	cbnz	r0, 800258a <_svfiprintf_r+0x32>
 800257c:	230c      	movs	r3, #12
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	b01d      	add	sp, #116	@ 0x74
 8002586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258a:	2340      	movs	r3, #64	@ 0x40
 800258c:	616b      	str	r3, [r5, #20]
 800258e:	2300      	movs	r3, #0
 8002590:	9309      	str	r3, [sp, #36]	@ 0x24
 8002592:	2320      	movs	r3, #32
 8002594:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002598:	2330      	movs	r3, #48	@ 0x30
 800259a:	f04f 0901 	mov.w	r9, #1
 800259e:	f8cd 800c 	str.w	r8, [sp, #12]
 80025a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800273c <_svfiprintf_r+0x1e4>
 80025a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025aa:	4623      	mov	r3, r4
 80025ac:	469a      	mov	sl, r3
 80025ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025b2:	b10a      	cbz	r2, 80025b8 <_svfiprintf_r+0x60>
 80025b4:	2a25      	cmp	r2, #37	@ 0x25
 80025b6:	d1f9      	bne.n	80025ac <_svfiprintf_r+0x54>
 80025b8:	ebba 0b04 	subs.w	fp, sl, r4
 80025bc:	d00b      	beq.n	80025d6 <_svfiprintf_r+0x7e>
 80025be:	465b      	mov	r3, fp
 80025c0:	4622      	mov	r2, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	4638      	mov	r0, r7
 80025c6:	f7ff ff6b 	bl	80024a0 <__ssputs_r>
 80025ca:	3001      	adds	r0, #1
 80025cc:	f000 80a7 	beq.w	800271e <_svfiprintf_r+0x1c6>
 80025d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025d2:	445a      	add	r2, fp
 80025d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80025d6:	f89a 3000 	ldrb.w	r3, [sl]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 809f 	beq.w	800271e <_svfiprintf_r+0x1c6>
 80025e0:	2300      	movs	r3, #0
 80025e2:	f04f 32ff 	mov.w	r2, #4294967295
 80025e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025ea:	f10a 0a01 	add.w	sl, sl, #1
 80025ee:	9304      	str	r3, [sp, #16]
 80025f0:	9307      	str	r3, [sp, #28]
 80025f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80025f8:	4654      	mov	r4, sl
 80025fa:	2205      	movs	r2, #5
 80025fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002600:	484e      	ldr	r0, [pc, #312]	@ (800273c <_svfiprintf_r+0x1e4>)
 8002602:	f000 fa61 	bl	8002ac8 <memchr>
 8002606:	9a04      	ldr	r2, [sp, #16]
 8002608:	b9d8      	cbnz	r0, 8002642 <_svfiprintf_r+0xea>
 800260a:	06d0      	lsls	r0, r2, #27
 800260c:	bf44      	itt	mi
 800260e:	2320      	movmi	r3, #32
 8002610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002614:	0711      	lsls	r1, r2, #28
 8002616:	bf44      	itt	mi
 8002618:	232b      	movmi	r3, #43	@ 0x2b
 800261a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800261e:	f89a 3000 	ldrb.w	r3, [sl]
 8002622:	2b2a      	cmp	r3, #42	@ 0x2a
 8002624:	d015      	beq.n	8002652 <_svfiprintf_r+0xfa>
 8002626:	4654      	mov	r4, sl
 8002628:	2000      	movs	r0, #0
 800262a:	f04f 0c0a 	mov.w	ip, #10
 800262e:	9a07      	ldr	r2, [sp, #28]
 8002630:	4621      	mov	r1, r4
 8002632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002636:	3b30      	subs	r3, #48	@ 0x30
 8002638:	2b09      	cmp	r3, #9
 800263a:	d94b      	bls.n	80026d4 <_svfiprintf_r+0x17c>
 800263c:	b1b0      	cbz	r0, 800266c <_svfiprintf_r+0x114>
 800263e:	9207      	str	r2, [sp, #28]
 8002640:	e014      	b.n	800266c <_svfiprintf_r+0x114>
 8002642:	eba0 0308 	sub.w	r3, r0, r8
 8002646:	fa09 f303 	lsl.w	r3, r9, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	46a2      	mov	sl, r4
 800264e:	9304      	str	r3, [sp, #16]
 8002650:	e7d2      	b.n	80025f8 <_svfiprintf_r+0xa0>
 8002652:	9b03      	ldr	r3, [sp, #12]
 8002654:	1d19      	adds	r1, r3, #4
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	9103      	str	r1, [sp, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	bfbb      	ittet	lt
 800265e:	425b      	neglt	r3, r3
 8002660:	f042 0202 	orrlt.w	r2, r2, #2
 8002664:	9307      	strge	r3, [sp, #28]
 8002666:	9307      	strlt	r3, [sp, #28]
 8002668:	bfb8      	it	lt
 800266a:	9204      	strlt	r2, [sp, #16]
 800266c:	7823      	ldrb	r3, [r4, #0]
 800266e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002670:	d10a      	bne.n	8002688 <_svfiprintf_r+0x130>
 8002672:	7863      	ldrb	r3, [r4, #1]
 8002674:	2b2a      	cmp	r3, #42	@ 0x2a
 8002676:	d132      	bne.n	80026de <_svfiprintf_r+0x186>
 8002678:	9b03      	ldr	r3, [sp, #12]
 800267a:	3402      	adds	r4, #2
 800267c:	1d1a      	adds	r2, r3, #4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	9203      	str	r2, [sp, #12]
 8002682:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002686:	9305      	str	r3, [sp, #20]
 8002688:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002740 <_svfiprintf_r+0x1e8>
 800268c:	2203      	movs	r2, #3
 800268e:	4650      	mov	r0, sl
 8002690:	7821      	ldrb	r1, [r4, #0]
 8002692:	f000 fa19 	bl	8002ac8 <memchr>
 8002696:	b138      	cbz	r0, 80026a8 <_svfiprintf_r+0x150>
 8002698:	2240      	movs	r2, #64	@ 0x40
 800269a:	9b04      	ldr	r3, [sp, #16]
 800269c:	eba0 000a 	sub.w	r0, r0, sl
 80026a0:	4082      	lsls	r2, r0
 80026a2:	4313      	orrs	r3, r2
 80026a4:	3401      	adds	r4, #1
 80026a6:	9304      	str	r3, [sp, #16]
 80026a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026ac:	2206      	movs	r2, #6
 80026ae:	4825      	ldr	r0, [pc, #148]	@ (8002744 <_svfiprintf_r+0x1ec>)
 80026b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026b4:	f000 fa08 	bl	8002ac8 <memchr>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d036      	beq.n	800272a <_svfiprintf_r+0x1d2>
 80026bc:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <_svfiprintf_r+0x1f0>)
 80026be:	bb1b      	cbnz	r3, 8002708 <_svfiprintf_r+0x1b0>
 80026c0:	9b03      	ldr	r3, [sp, #12]
 80026c2:	3307      	adds	r3, #7
 80026c4:	f023 0307 	bic.w	r3, r3, #7
 80026c8:	3308      	adds	r3, #8
 80026ca:	9303      	str	r3, [sp, #12]
 80026cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026ce:	4433      	add	r3, r6
 80026d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80026d2:	e76a      	b.n	80025aa <_svfiprintf_r+0x52>
 80026d4:	460c      	mov	r4, r1
 80026d6:	2001      	movs	r0, #1
 80026d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80026dc:	e7a8      	b.n	8002630 <_svfiprintf_r+0xd8>
 80026de:	2300      	movs	r3, #0
 80026e0:	f04f 0c0a 	mov.w	ip, #10
 80026e4:	4619      	mov	r1, r3
 80026e6:	3401      	adds	r4, #1
 80026e8:	9305      	str	r3, [sp, #20]
 80026ea:	4620      	mov	r0, r4
 80026ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026f0:	3a30      	subs	r2, #48	@ 0x30
 80026f2:	2a09      	cmp	r2, #9
 80026f4:	d903      	bls.n	80026fe <_svfiprintf_r+0x1a6>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0c6      	beq.n	8002688 <_svfiprintf_r+0x130>
 80026fa:	9105      	str	r1, [sp, #20]
 80026fc:	e7c4      	b.n	8002688 <_svfiprintf_r+0x130>
 80026fe:	4604      	mov	r4, r0
 8002700:	2301      	movs	r3, #1
 8002702:	fb0c 2101 	mla	r1, ip, r1, r2
 8002706:	e7f0      	b.n	80026ea <_svfiprintf_r+0x192>
 8002708:	ab03      	add	r3, sp, #12
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	462a      	mov	r2, r5
 800270e:	4638      	mov	r0, r7
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <_svfiprintf_r+0x1f4>)
 8002712:	a904      	add	r1, sp, #16
 8002714:	f3af 8000 	nop.w
 8002718:	1c42      	adds	r2, r0, #1
 800271a:	4606      	mov	r6, r0
 800271c:	d1d6      	bne.n	80026cc <_svfiprintf_r+0x174>
 800271e:	89ab      	ldrh	r3, [r5, #12]
 8002720:	065b      	lsls	r3, r3, #25
 8002722:	f53f af2d 	bmi.w	8002580 <_svfiprintf_r+0x28>
 8002726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002728:	e72c      	b.n	8002584 <_svfiprintf_r+0x2c>
 800272a:	ab03      	add	r3, sp, #12
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	462a      	mov	r2, r5
 8002730:	4638      	mov	r0, r7
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <_svfiprintf_r+0x1f4>)
 8002734:	a904      	add	r1, sp, #16
 8002736:	f000 f87d 	bl	8002834 <_printf_i>
 800273a:	e7ed      	b.n	8002718 <_svfiprintf_r+0x1c0>
 800273c:	08002bc2 	.word	0x08002bc2
 8002740:	08002bc8 	.word	0x08002bc8
 8002744:	08002bcc 	.word	0x08002bcc
 8002748:	00000000 	.word	0x00000000
 800274c:	080024a1 	.word	0x080024a1

08002750 <_printf_common>:
 8002750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	4616      	mov	r6, r2
 8002756:	4698      	mov	r8, r3
 8002758:	688a      	ldr	r2, [r1, #8]
 800275a:	690b      	ldr	r3, [r1, #16]
 800275c:	4607      	mov	r7, r0
 800275e:	4293      	cmp	r3, r2
 8002760:	bfb8      	it	lt
 8002762:	4613      	movlt	r3, r2
 8002764:	6033      	str	r3, [r6, #0]
 8002766:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800276a:	460c      	mov	r4, r1
 800276c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002770:	b10a      	cbz	r2, 8002776 <_printf_common+0x26>
 8002772:	3301      	adds	r3, #1
 8002774:	6033      	str	r3, [r6, #0]
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	0699      	lsls	r1, r3, #26
 800277a:	bf42      	ittt	mi
 800277c:	6833      	ldrmi	r3, [r6, #0]
 800277e:	3302      	addmi	r3, #2
 8002780:	6033      	strmi	r3, [r6, #0]
 8002782:	6825      	ldr	r5, [r4, #0]
 8002784:	f015 0506 	ands.w	r5, r5, #6
 8002788:	d106      	bne.n	8002798 <_printf_common+0x48>
 800278a:	f104 0a19 	add.w	sl, r4, #25
 800278e:	68e3      	ldr	r3, [r4, #12]
 8002790:	6832      	ldr	r2, [r6, #0]
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	42ab      	cmp	r3, r5
 8002796:	dc2b      	bgt.n	80027f0 <_printf_common+0xa0>
 8002798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	3b00      	subs	r3, #0
 80027a0:	bf18      	it	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	0692      	lsls	r2, r2, #26
 80027a6:	d430      	bmi.n	800280a <_printf_common+0xba>
 80027a8:	4641      	mov	r1, r8
 80027aa:	4638      	mov	r0, r7
 80027ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027b0:	47c8      	blx	r9
 80027b2:	3001      	adds	r0, #1
 80027b4:	d023      	beq.n	80027fe <_printf_common+0xae>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	6922      	ldr	r2, [r4, #16]
 80027ba:	f003 0306 	and.w	r3, r3, #6
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf14      	ite	ne
 80027c2:	2500      	movne	r5, #0
 80027c4:	6833      	ldreq	r3, [r6, #0]
 80027c6:	f04f 0600 	mov.w	r6, #0
 80027ca:	bf08      	it	eq
 80027cc:	68e5      	ldreq	r5, [r4, #12]
 80027ce:	f104 041a 	add.w	r4, r4, #26
 80027d2:	bf08      	it	eq
 80027d4:	1aed      	subeq	r5, r5, r3
 80027d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027da:	bf08      	it	eq
 80027dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bfc4      	itt	gt
 80027e4:	1a9b      	subgt	r3, r3, r2
 80027e6:	18ed      	addgt	r5, r5, r3
 80027e8:	42b5      	cmp	r5, r6
 80027ea:	d11a      	bne.n	8002822 <_printf_common+0xd2>
 80027ec:	2000      	movs	r0, #0
 80027ee:	e008      	b.n	8002802 <_printf_common+0xb2>
 80027f0:	2301      	movs	r3, #1
 80027f2:	4652      	mov	r2, sl
 80027f4:	4641      	mov	r1, r8
 80027f6:	4638      	mov	r0, r7
 80027f8:	47c8      	blx	r9
 80027fa:	3001      	adds	r0, #1
 80027fc:	d103      	bne.n	8002806 <_printf_common+0xb6>
 80027fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002806:	3501      	adds	r5, #1
 8002808:	e7c1      	b.n	800278e <_printf_common+0x3e>
 800280a:	2030      	movs	r0, #48	@ 0x30
 800280c:	18e1      	adds	r1, r4, r3
 800280e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002818:	4422      	add	r2, r4
 800281a:	3302      	adds	r3, #2
 800281c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002820:	e7c2      	b.n	80027a8 <_printf_common+0x58>
 8002822:	2301      	movs	r3, #1
 8002824:	4622      	mov	r2, r4
 8002826:	4641      	mov	r1, r8
 8002828:	4638      	mov	r0, r7
 800282a:	47c8      	blx	r9
 800282c:	3001      	adds	r0, #1
 800282e:	d0e6      	beq.n	80027fe <_printf_common+0xae>
 8002830:	3601      	adds	r6, #1
 8002832:	e7d9      	b.n	80027e8 <_printf_common+0x98>

08002834 <_printf_i>:
 8002834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002838:	7e0f      	ldrb	r7, [r1, #24]
 800283a:	4691      	mov	r9, r2
 800283c:	2f78      	cmp	r7, #120	@ 0x78
 800283e:	4680      	mov	r8, r0
 8002840:	460c      	mov	r4, r1
 8002842:	469a      	mov	sl, r3
 8002844:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800284a:	d807      	bhi.n	800285c <_printf_i+0x28>
 800284c:	2f62      	cmp	r7, #98	@ 0x62
 800284e:	d80a      	bhi.n	8002866 <_printf_i+0x32>
 8002850:	2f00      	cmp	r7, #0
 8002852:	f000 80d3 	beq.w	80029fc <_printf_i+0x1c8>
 8002856:	2f58      	cmp	r7, #88	@ 0x58
 8002858:	f000 80ba 	beq.w	80029d0 <_printf_i+0x19c>
 800285c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002864:	e03a      	b.n	80028dc <_printf_i+0xa8>
 8002866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800286a:	2b15      	cmp	r3, #21
 800286c:	d8f6      	bhi.n	800285c <_printf_i+0x28>
 800286e:	a101      	add	r1, pc, #4	@ (adr r1, 8002874 <_printf_i+0x40>)
 8002870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002874:	080028cd 	.word	0x080028cd
 8002878:	080028e1 	.word	0x080028e1
 800287c:	0800285d 	.word	0x0800285d
 8002880:	0800285d 	.word	0x0800285d
 8002884:	0800285d 	.word	0x0800285d
 8002888:	0800285d 	.word	0x0800285d
 800288c:	080028e1 	.word	0x080028e1
 8002890:	0800285d 	.word	0x0800285d
 8002894:	0800285d 	.word	0x0800285d
 8002898:	0800285d 	.word	0x0800285d
 800289c:	0800285d 	.word	0x0800285d
 80028a0:	080029e3 	.word	0x080029e3
 80028a4:	0800290b 	.word	0x0800290b
 80028a8:	0800299d 	.word	0x0800299d
 80028ac:	0800285d 	.word	0x0800285d
 80028b0:	0800285d 	.word	0x0800285d
 80028b4:	08002a05 	.word	0x08002a05
 80028b8:	0800285d 	.word	0x0800285d
 80028bc:	0800290b 	.word	0x0800290b
 80028c0:	0800285d 	.word	0x0800285d
 80028c4:	0800285d 	.word	0x0800285d
 80028c8:	080029a5 	.word	0x080029a5
 80028cc:	6833      	ldr	r3, [r6, #0]
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6032      	str	r2, [r6, #0]
 80028d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028dc:	2301      	movs	r3, #1
 80028de:	e09e      	b.n	8002a1e <_printf_i+0x1ea>
 80028e0:	6833      	ldr	r3, [r6, #0]
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	1d19      	adds	r1, r3, #4
 80028e6:	6031      	str	r1, [r6, #0]
 80028e8:	0606      	lsls	r6, r0, #24
 80028ea:	d501      	bpl.n	80028f0 <_printf_i+0xbc>
 80028ec:	681d      	ldr	r5, [r3, #0]
 80028ee:	e003      	b.n	80028f8 <_printf_i+0xc4>
 80028f0:	0645      	lsls	r5, r0, #25
 80028f2:	d5fb      	bpl.n	80028ec <_printf_i+0xb8>
 80028f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	da03      	bge.n	8002904 <_printf_i+0xd0>
 80028fc:	232d      	movs	r3, #45	@ 0x2d
 80028fe:	426d      	negs	r5, r5
 8002900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002904:	230a      	movs	r3, #10
 8002906:	4859      	ldr	r0, [pc, #356]	@ (8002a6c <_printf_i+0x238>)
 8002908:	e011      	b.n	800292e <_printf_i+0xfa>
 800290a:	6821      	ldr	r1, [r4, #0]
 800290c:	6833      	ldr	r3, [r6, #0]
 800290e:	0608      	lsls	r0, r1, #24
 8002910:	f853 5b04 	ldr.w	r5, [r3], #4
 8002914:	d402      	bmi.n	800291c <_printf_i+0xe8>
 8002916:	0649      	lsls	r1, r1, #25
 8002918:	bf48      	it	mi
 800291a:	b2ad      	uxthmi	r5, r5
 800291c:	2f6f      	cmp	r7, #111	@ 0x6f
 800291e:	6033      	str	r3, [r6, #0]
 8002920:	bf14      	ite	ne
 8002922:	230a      	movne	r3, #10
 8002924:	2308      	moveq	r3, #8
 8002926:	4851      	ldr	r0, [pc, #324]	@ (8002a6c <_printf_i+0x238>)
 8002928:	2100      	movs	r1, #0
 800292a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800292e:	6866      	ldr	r6, [r4, #4]
 8002930:	2e00      	cmp	r6, #0
 8002932:	bfa8      	it	ge
 8002934:	6821      	ldrge	r1, [r4, #0]
 8002936:	60a6      	str	r6, [r4, #8]
 8002938:	bfa4      	itt	ge
 800293a:	f021 0104 	bicge.w	r1, r1, #4
 800293e:	6021      	strge	r1, [r4, #0]
 8002940:	b90d      	cbnz	r5, 8002946 <_printf_i+0x112>
 8002942:	2e00      	cmp	r6, #0
 8002944:	d04b      	beq.n	80029de <_printf_i+0x1aa>
 8002946:	4616      	mov	r6, r2
 8002948:	fbb5 f1f3 	udiv	r1, r5, r3
 800294c:	fb03 5711 	mls	r7, r3, r1, r5
 8002950:	5dc7      	ldrb	r7, [r0, r7]
 8002952:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002956:	462f      	mov	r7, r5
 8002958:	42bb      	cmp	r3, r7
 800295a:	460d      	mov	r5, r1
 800295c:	d9f4      	bls.n	8002948 <_printf_i+0x114>
 800295e:	2b08      	cmp	r3, #8
 8002960:	d10b      	bne.n	800297a <_printf_i+0x146>
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	07df      	lsls	r7, r3, #31
 8002966:	d508      	bpl.n	800297a <_printf_i+0x146>
 8002968:	6923      	ldr	r3, [r4, #16]
 800296a:	6861      	ldr	r1, [r4, #4]
 800296c:	4299      	cmp	r1, r3
 800296e:	bfde      	ittt	le
 8002970:	2330      	movle	r3, #48	@ 0x30
 8002972:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002976:	f106 36ff 	addle.w	r6, r6, #4294967295
 800297a:	1b92      	subs	r2, r2, r6
 800297c:	6122      	str	r2, [r4, #16]
 800297e:	464b      	mov	r3, r9
 8002980:	4621      	mov	r1, r4
 8002982:	4640      	mov	r0, r8
 8002984:	f8cd a000 	str.w	sl, [sp]
 8002988:	aa03      	add	r2, sp, #12
 800298a:	f7ff fee1 	bl	8002750 <_printf_common>
 800298e:	3001      	adds	r0, #1
 8002990:	d14a      	bne.n	8002a28 <_printf_i+0x1f4>
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	b004      	add	sp, #16
 8002998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f043 0320 	orr.w	r3, r3, #32
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	2778      	movs	r7, #120	@ 0x78
 80029a6:	4832      	ldr	r0, [pc, #200]	@ (8002a70 <_printf_i+0x23c>)
 80029a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	6831      	ldr	r1, [r6, #0]
 80029b0:	061f      	lsls	r7, r3, #24
 80029b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80029b6:	d402      	bmi.n	80029be <_printf_i+0x18a>
 80029b8:	065f      	lsls	r7, r3, #25
 80029ba:	bf48      	it	mi
 80029bc:	b2ad      	uxthmi	r5, r5
 80029be:	6031      	str	r1, [r6, #0]
 80029c0:	07d9      	lsls	r1, r3, #31
 80029c2:	bf44      	itt	mi
 80029c4:	f043 0320 	orrmi.w	r3, r3, #32
 80029c8:	6023      	strmi	r3, [r4, #0]
 80029ca:	b11d      	cbz	r5, 80029d4 <_printf_i+0x1a0>
 80029cc:	2310      	movs	r3, #16
 80029ce:	e7ab      	b.n	8002928 <_printf_i+0xf4>
 80029d0:	4826      	ldr	r0, [pc, #152]	@ (8002a6c <_printf_i+0x238>)
 80029d2:	e7e9      	b.n	80029a8 <_printf_i+0x174>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f023 0320 	bic.w	r3, r3, #32
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	e7f6      	b.n	80029cc <_printf_i+0x198>
 80029de:	4616      	mov	r6, r2
 80029e0:	e7bd      	b.n	800295e <_printf_i+0x12a>
 80029e2:	6833      	ldr	r3, [r6, #0]
 80029e4:	6825      	ldr	r5, [r4, #0]
 80029e6:	1d18      	adds	r0, r3, #4
 80029e8:	6961      	ldr	r1, [r4, #20]
 80029ea:	6030      	str	r0, [r6, #0]
 80029ec:	062e      	lsls	r6, r5, #24
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	d501      	bpl.n	80029f6 <_printf_i+0x1c2>
 80029f2:	6019      	str	r1, [r3, #0]
 80029f4:	e002      	b.n	80029fc <_printf_i+0x1c8>
 80029f6:	0668      	lsls	r0, r5, #25
 80029f8:	d5fb      	bpl.n	80029f2 <_printf_i+0x1be>
 80029fa:	8019      	strh	r1, [r3, #0]
 80029fc:	2300      	movs	r3, #0
 80029fe:	4616      	mov	r6, r2
 8002a00:	6123      	str	r3, [r4, #16]
 8002a02:	e7bc      	b.n	800297e <_printf_i+0x14a>
 8002a04:	6833      	ldr	r3, [r6, #0]
 8002a06:	2100      	movs	r1, #0
 8002a08:	1d1a      	adds	r2, r3, #4
 8002a0a:	6032      	str	r2, [r6, #0]
 8002a0c:	681e      	ldr	r6, [r3, #0]
 8002a0e:	6862      	ldr	r2, [r4, #4]
 8002a10:	4630      	mov	r0, r6
 8002a12:	f000 f859 	bl	8002ac8 <memchr>
 8002a16:	b108      	cbz	r0, 8002a1c <_printf_i+0x1e8>
 8002a18:	1b80      	subs	r0, r0, r6
 8002a1a:	6060      	str	r0, [r4, #4]
 8002a1c:	6863      	ldr	r3, [r4, #4]
 8002a1e:	6123      	str	r3, [r4, #16]
 8002a20:	2300      	movs	r3, #0
 8002a22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a26:	e7aa      	b.n	800297e <_printf_i+0x14a>
 8002a28:	4632      	mov	r2, r6
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	4640      	mov	r0, r8
 8002a2e:	6923      	ldr	r3, [r4, #16]
 8002a30:	47d0      	blx	sl
 8002a32:	3001      	adds	r0, #1
 8002a34:	d0ad      	beq.n	8002992 <_printf_i+0x15e>
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	079b      	lsls	r3, r3, #30
 8002a3a:	d413      	bmi.n	8002a64 <_printf_i+0x230>
 8002a3c:	68e0      	ldr	r0, [r4, #12]
 8002a3e:	9b03      	ldr	r3, [sp, #12]
 8002a40:	4298      	cmp	r0, r3
 8002a42:	bfb8      	it	lt
 8002a44:	4618      	movlt	r0, r3
 8002a46:	e7a6      	b.n	8002996 <_printf_i+0x162>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4632      	mov	r2, r6
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	4640      	mov	r0, r8
 8002a50:	47d0      	blx	sl
 8002a52:	3001      	adds	r0, #1
 8002a54:	d09d      	beq.n	8002992 <_printf_i+0x15e>
 8002a56:	3501      	adds	r5, #1
 8002a58:	68e3      	ldr	r3, [r4, #12]
 8002a5a:	9903      	ldr	r1, [sp, #12]
 8002a5c:	1a5b      	subs	r3, r3, r1
 8002a5e:	42ab      	cmp	r3, r5
 8002a60:	dcf2      	bgt.n	8002a48 <_printf_i+0x214>
 8002a62:	e7eb      	b.n	8002a3c <_printf_i+0x208>
 8002a64:	2500      	movs	r5, #0
 8002a66:	f104 0619 	add.w	r6, r4, #25
 8002a6a:	e7f5      	b.n	8002a58 <_printf_i+0x224>
 8002a6c:	08002bd3 	.word	0x08002bd3
 8002a70:	08002be4 	.word	0x08002be4

08002a74 <memmove>:
 8002a74:	4288      	cmp	r0, r1
 8002a76:	b510      	push	{r4, lr}
 8002a78:	eb01 0402 	add.w	r4, r1, r2
 8002a7c:	d902      	bls.n	8002a84 <memmove+0x10>
 8002a7e:	4284      	cmp	r4, r0
 8002a80:	4623      	mov	r3, r4
 8002a82:	d807      	bhi.n	8002a94 <memmove+0x20>
 8002a84:	1e43      	subs	r3, r0, #1
 8002a86:	42a1      	cmp	r1, r4
 8002a88:	d008      	beq.n	8002a9c <memmove+0x28>
 8002a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a92:	e7f8      	b.n	8002a86 <memmove+0x12>
 8002a94:	4601      	mov	r1, r0
 8002a96:	4402      	add	r2, r0
 8002a98:	428a      	cmp	r2, r1
 8002a9a:	d100      	bne.n	8002a9e <memmove+0x2a>
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aa6:	e7f7      	b.n	8002a98 <memmove+0x24>

08002aa8 <_sbrk_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4d05      	ldr	r5, [pc, #20]	@ (8002ac4 <_sbrk_r+0x1c>)
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4608      	mov	r0, r1
 8002ab2:	602b      	str	r3, [r5, #0]
 8002ab4:	f7fd fde4 	bl	8000680 <_sbrk>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d102      	bne.n	8002ac2 <_sbrk_r+0x1a>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	b103      	cbz	r3, 8002ac2 <_sbrk_r+0x1a>
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	bd38      	pop	{r3, r4, r5, pc}
 8002ac4:	200002c0 	.word	0x200002c0

08002ac8 <memchr>:
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b510      	push	{r4, lr}
 8002acc:	b2c9      	uxtb	r1, r1
 8002ace:	4402      	add	r2, r0
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	d101      	bne.n	8002ada <memchr+0x12>
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e003      	b.n	8002ae2 <memchr+0x1a>
 8002ada:	7804      	ldrb	r4, [r0, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	428c      	cmp	r4, r1
 8002ae0:	d1f6      	bne.n	8002ad0 <memchr+0x8>
 8002ae2:	bd10      	pop	{r4, pc}

08002ae4 <memcpy>:
 8002ae4:	440a      	add	r2, r1
 8002ae6:	4291      	cmp	r1, r2
 8002ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002aec:	d100      	bne.n	8002af0 <memcpy+0xc>
 8002aee:	4770      	bx	lr
 8002af0:	b510      	push	{r4, lr}
 8002af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002af6:	4291      	cmp	r1, r2
 8002af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002afc:	d1f9      	bne.n	8002af2 <memcpy+0xe>
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <_realloc_r>:
 8002b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b04:	4680      	mov	r8, r0
 8002b06:	4615      	mov	r5, r2
 8002b08:	460c      	mov	r4, r1
 8002b0a:	b921      	cbnz	r1, 8002b16 <_realloc_r+0x16>
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b12:	f7ff bc39 	b.w	8002388 <_malloc_r>
 8002b16:	b92a      	cbnz	r2, 8002b24 <_realloc_r+0x24>
 8002b18:	f7ff fbcc 	bl	80022b4 <_free_r>
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	4620      	mov	r0, r4
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b24:	f000 f81a 	bl	8002b5c <_malloc_usable_size_r>
 8002b28:	4285      	cmp	r5, r0
 8002b2a:	4606      	mov	r6, r0
 8002b2c:	d802      	bhi.n	8002b34 <_realloc_r+0x34>
 8002b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002b32:	d8f4      	bhi.n	8002b1e <_realloc_r+0x1e>
 8002b34:	4629      	mov	r1, r5
 8002b36:	4640      	mov	r0, r8
 8002b38:	f7ff fc26 	bl	8002388 <_malloc_r>
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d0ec      	beq.n	8002b1c <_realloc_r+0x1c>
 8002b42:	42b5      	cmp	r5, r6
 8002b44:	462a      	mov	r2, r5
 8002b46:	4621      	mov	r1, r4
 8002b48:	bf28      	it	cs
 8002b4a:	4632      	movcs	r2, r6
 8002b4c:	f7ff ffca 	bl	8002ae4 <memcpy>
 8002b50:	4621      	mov	r1, r4
 8002b52:	4640      	mov	r0, r8
 8002b54:	f7ff fbae 	bl	80022b4 <_free_r>
 8002b58:	463c      	mov	r4, r7
 8002b5a:	e7e0      	b.n	8002b1e <_realloc_r+0x1e>

08002b5c <_malloc_usable_size_r>:
 8002b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b60:	1f18      	subs	r0, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bfbc      	itt	lt
 8002b66:	580b      	ldrlt	r3, [r1, r0]
 8002b68:	18c0      	addlt	r0, r0, r3
 8002b6a:	4770      	bx	lr

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
